#!/usr/bin/env python

import argparse

## At the moment this script is used to generate the coverage of each MAG in a single sample, but could be "improved" to include a list of samples etc"
parser = argparse.ArgumentParser(description='''tabulate the reads mapped for the MAGs of interest as generated by "scafstats" flag in the bbmap command''')
parser.add_argument('--mappingfile', help='the resulting file specified by scafstats=<file> in the bbmap command')
parser.add_argument('--out', help='the file to write the awesome results including the MAG name and the coverage')
parser.add_argument('--ids', help='the list of scaffold ids - required because if there are no reads recruited, then a MAG might not be included in the output')
args=parser.parse_args()

# The outfile to put results
outfile = open(args.out, 'w')
outfile.write("a_"+str(args.mappingfile)+'\t'+"stat"+'\n')

# The empty list to hold all the mag ids associated with those found in the "ids" file that you provided as input
all_MAGs = {}
count = 0
for line in open(args.ids, 'r'):
    x = line.strip()
    all_MAGs[x] = "n_"+str(count)
    count += 1

# A dictionary to hold the contigs and their stats in the mapping file
all_data_dict = {}

# A function to sum all the read counts for the scaffolds in a bin
def aver(lst):
    return sum(lst)/len(lst)

# This populates the dictionary of each scaffold and the stats generated by bbmap
for line in open(args.mappingfile, 'r'):
    x = line.strip().split('\t')
    if "s_SalMar" in x[0]:
        all_data_dict[x[0]] = x[0:len(x)]

#A dictionary to store the results prior to writing
mags_and_stats_dict = {}

#For each mag in the collection, sum the total lenght of all reads mapped to each contig
for MAG in all_MAGs:
    ave=[]
    for key in all_data_dict.keys():
        if MAG in key:
            ave.append(float(all_data_dict[key][1]))

    mags_and_stats_dict[MAG] = round(aver(ave),4)


print("this is the total number of MAGs in you set", len(all_MAGs.keys()))
print("number of mags found in mapping file",len(mags_and_stats_dict.keys()))

for MAG in all_MAGs.keys():
    if MAG not in mags_and_stats_dict.keys():
        print("this MAG was not found in mapping file", MAG)
        mags_and_stats_dict[MAG] = 0

for MAG in mags_and_stats_dict.keys():
    outfile.write(MAG+'\t'+str(mags_and_stats_dict[MAG])+'\n')

 
